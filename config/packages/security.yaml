security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # on place nos firewall de lexikjwt avant main
        login:
            # ici on definit la config de tout
            # endpoint qui commence par "/api/login"
            pattern: ^/api/login
            # ici stateless indique que la securité sera sans 
            # etat (le serveur ne stock 
            # pas l'etat de l'utilisateur authentifié)
            stateless: true
            json_login:
                # ici le endpoint pour obtenir le token
                check_path: /api/login_check
                # on gere le cas sans erreur
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # api:
        #     pattern: ^/api
        #     stateless: true
        #     jwt: ~
        api_secure:
            pattern: ^/api/secure
            stateless: true
            jwt: ~
        api_public:
            pattern: ^/api
            stateless: true    
            
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_main_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/user, roles: ROLE_ADMIN}
        - { path: ^/user/(new|edit), roles: ROLE_ADMIN}
        - { path: ^/user/\d+$, roles: ROLE_ADMIN, methods: [POST]}
        - { path: ^/(category|product), roles: [ROLE_ADMIN, ROLE_MANAGER]}
        - { path: ^/(category|product)/\d+/edit, roles: [ROLE_ADMIN, ROLE_MANAGER]}
        - { path: ^/(category|product)/\d+$, roles: [ROLE_ADMIN, ROLE_MANAGER], methods: [POST]}
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/categories, roles: PUBLIC_ACCESS}
        - { path: ^/api/products, roles: PUBLIC_ACCESS}
        - { path: ^/api/users, roles: PUBLIC_ACCESS }
        - { path: ^/api/secure/users/\d+, roles: [ROLE_ADMIN,]}
        - { path: ^/api/secure/users/edit, roles: [ROLE_USER]}


    #role_hierarchy:
    #    ROLE_MANAGER: ROLE_USER
    #    ROLE_ADMIN: ROLE_MANAGER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
